/**
 * 纵向字符
 * a       普通字符
 * [abc]    字符集合
 * [^abc]   字符集合取反
 * [a-zA-z0-0]  范围表示法
 * ------------------------部分范围简写
 * \d   [0-9]   digit缩写数字范围
 * \D   [^0-9]  非数字
 * \w   [0-9a-zA-Z_]    word缩写包含数字，字母，下划线
 * \W   [^0-9a-zA-Z_]   word取反
 * \s   [\t\v\n\r\f]    Space缩写 空白字符
 * \S   [^\t\v\n\r\f]   非空白字符
 * .    匹配除换行符\n以外任何单字符
 * *    通配符，匹配前面的子表达式零次或多次
 * .*?  惰性匹配，match到一个返回一个比如 aa1bbaa2bb aa.*?bb, C 惰性替换为 aaCbbaaCbb aa.*bb, C 非惰性替换为aaCbb
 *
 *
 * 纵向字符
 * x{m,n}   x匹配m到n次
 * x{m,}    x匹配至少m次
 * x{m}     x匹配m次
 * x*       x匹配任意次
 * x+       x匹配至少一次
 * x?       x匹配0次或一次
 *
 * 位置匹配（每个字符前后的间隙，就相当于位置）
 * ^    脱字符     开头位置，比如1234相当于1前面的位置
 * $    美元符     结束位置，比如1234相当于4后面的位置
 * \b  bound简写   单词边界
 * \B             非单词边界
 * (?=p)          该位置之后的字符要匹配p，也就是p前面的位置
 * (?!p)          该位置之后的字符不匹配p，也就是除了p，其他字符前面的位置
 *
 * 优先级
 * \转移符 > ()[]分组和集合 > {m,n}量词限定符 > ^、$、字符 位置和序列 > |管道符
 *
 * 其他修饰符
 * x|y  多选分支匹配x或者y
 * ()   分组
 * $1   读取分组的值
 * g    global简写全局匹配
 * i    ignore简写不区分大小写
 * m    more简写多行匹配
 * s    特殊字符圆点 因为.范围内不包含换行符，使用s修饰之后，就能使.包含所有字符
 * U    只匹配最近的一个字符串；不重复匹配
 *
 *
 */



// /^(\d{15} | \d{17}[\dxX])$/
// \d{15} //15位数字
// \d{17}[\dxX] 17位数字+ 最后一位是数数组或者x或者X 总共18位号码
//身份证号正则表达式

/**
 * ip地址的正则表达式
 * [0~255].[0~255].[0~255].[0~255]
 * 1、拆分为[0~255].匹配3次 再加上末位的 0~255
 * 2、[0~255]该如何表示？
 * 3、拆分为[0~9]|[10~99]|[100~199]|[200~255]
 * 4、[0~9]      0{0,2}\d
 * 5、[10~99]    0?[1-9]\d
 * 6、[100~199]  1\d{2}
 * 7、[200~255]  2[0-5]{2}
 * 所以最终的表达式为
 * ^((0{0,2}\d|0?[1-9]\d|1\d{2}|2[0-5]{2})\.){3}(0{0,2}\d|0?[1-9]\d|1\d{2}|2[0-5]{2})$
 * 注意，正则表达式中，空格也会认为是字符进行匹配，所以不能使用空格来作为美化格式的手段
 *
 */