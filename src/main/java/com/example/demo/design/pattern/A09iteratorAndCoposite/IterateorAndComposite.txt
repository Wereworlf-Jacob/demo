迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
    我们可以给ArrayList, 数组, Hashtable等所有的集合都是用迭代器的方式来遍历元素。
    这样我们就不需要通过for(i < list.size()); for(i < arry.length())不同的方式来遍历

    基于餐厅菜单的场景，早餐是list，午餐是数组，晚餐是hashtable。
    我们要通过女招待来遍历菜单，而女招待基于实体类的方式，就是fori size() length() values()等方式去遍历
    这样违背了面向接口编程，那么我们就通过统一接口迭代器，来实现统一的遍历。
    每个菜单都返回一个迭代器，供女招待使用。而所有的菜单都实现一个菜单接口，负责创建迭代器，这样就从实体类中解耦出来了
    接下来又有一种场景：
        午餐餐厅，想要添加一份甜点菜单。并将它插进常规的菜单中。也就是甜点菜单是午餐甜品的子菜单列表项
        此时我们需要：
            树形结构，可以容纳菜单、子菜单和菜单项
            能够再每个菜单的各个项之间游走。
            更有弹性的在菜单项之间游走，比方说，只遍历甜点菜单，也可以遍历餐厅的整个菜单（包括甜点菜单在内）
    基于以上需求，我们就又需要一种新的设计模式：组合模式

组合模式：允许你将对象组合成树形结构来表现“整体/部分”层次结构。
            组合能让客户以一致的方式处理个别对象以及对象组合
    以菜单为例，我们抽象出一个共同的对象：菜单组件
    菜单组件可以为菜单项（叶子节点）也可以是菜单组合（包含菜单组件）
    所以我们有MenuComponent(组件), MenuItem(菜单项), Menu(菜单组合)
    所有的组件都必须实现MenuComponent接口；然而，叶节点和组合节点的角色不同，
    所以有些方法可能并不适用某种节点。面对这种情况，有时候，你最好是抛出运行时异常。

