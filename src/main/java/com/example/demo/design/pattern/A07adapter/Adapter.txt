适配器模式：将一个类的接口，转换成客户期望另一个接口。适配器让原本不兼容的类可以合作无间。
    需要面向接口开发，客户client，有一个请求，需要用到一个interfaceA的对象
    而我们有一个interfaceB的对象，也可以实现客户的请求。
    那么就需要一个adapterB的适配器，来把B转换成A
    那么adapterB就需要实现interfaceA，展示给客户，我是一个interfaceA的对象
    而adapterB还需要持有一个interfaceB，来通过B实现A产生的行为

装饰器模式和适配器模式对比：
    装饰器：
        用于扩展包装对象的行为或责任
        通过加入新行为的方式，也可以实现新接口，类似适配器的功能
        但是其主要职责是扩展
    适配器：
        用于转换接口请求，一定会进行接口的转换
        当将若干个类集成在一起，提供给客户期望的接口时，装饰器很难做到

我们使用组合的方式，来将被适配者 与 适配器 结合起来，使其输出成为目标类
这种方式为对象适配器

而采用多重继承的方式，适配器 继承 目标类 以及 被适配类
这种方式为类适配器（因为java不支持多重继承，所以该方法就不要再考虑了）